Створення потоків у Python
Потік як клас
Щоб створити потік, найпростіше імпортувати клас Thread із модуля threading і наслідуватись від цього класу. Далі вам потрібно визначити метод run у вашого класу, 
цей метод буде виконуватися в окремому потоці. 
Щоб розпочати виконання коду в окремому потоці, потрібно викликати метод start, який визначений у Thread. Давайте напишемо клас MyThread, що в окремому потоці 
“спить” протягом вказаного часу і після цього виводить у консоль 'Wake up!':
Це означає, що основний потік застосунку спочатку вивів 'Usefull message' і після нього через 2 секунди п'ять потоків MyThread вивели своє 'Wake up!', і тільки після цього скрипт завершився.
Скопіюйте код на власну машину та подивіться його виконання!
Документація про доступні в Python механізми написання потокового коду.
Потік як функтор
Є інший спосіб виконати код окремого потоку. Для цього потрібно, щоб код виконання був функтором (функцією або класом, який має метод __call__). Тоді об'єкт можна передати як іменований
аргумент target у Thread.
Потік у функції
У процесі створення екземпляра класу Thread можна передати аргументу target функцію та передати їй аргументи:
Зверніть увагу, що аргументи, які потрібно передати у функцію, передаються як кортеж args у Thread. Іменовані аргументи для функції можна так само передати як словник kwargs у Thread.
Пам’ятайте, що можете копіювати та запускати коди самостійно! Будь ласка, не нехтуйте цими можливостями відпрацювання вмінь, навіть якщо здається, що все зрозуміло! Самостійна робота може 
допомогти виявити недоліки у вашому розумінні процесів, а також підготувати до живого заняття з викладачем та до виконання домашнього завдання.
Очікування виконання потоку
Коли потрібно в основному застосунку дочекатися виконання потоку, можна скористатися блокуючим методом join.
Це може бути корисним, якщо ви хочете перевіряти стан потоку самостійно і не блокувати застосунок в очікуванні завершення.
Потоки Timer
Екземпляри класу Timer починають працювати з деякою затримкою, яку визначає програміст. Крім того, ці потоки можна скасувати будь-якої миті в період затримки. 
Наприклад, ви передумали стартувати певний потік.
Тут ми запланували виконання двох потоків через 0.5 та 0.7 секунд. Але потім через 0.6 секунди скасували виконання другого потоку second.cancel()
Отримаємо таке виведення:

